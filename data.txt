## Тестовое задание

Реализовать API управления библиотекой. Использовать [asp.net](http://asp.net) core, в качестве базы использовать Postgres в docker. Для взаимодействия с БД использовать EntityFramework Core.

### Сущности

- Автор: Идентификатор, имя (максимум 128 символов), дата рождения (не меньше 01-01-1900), жанр, дата создания сущности (текущая дата при создании автора).
Имя + дата рождения должны быть уникальными для автора.
- Книга: Идентификатор, год публикации, название (максимум 256 символов), идентификатор автора, количество книг в наличии (всегда ≥ 0), дата создания сущности (текущая дата при создании книги)..
Название + идентификатор автора + год публикации должны быть уникальными для книги.

### Функциональность

- Контроллер управления авторами
    - Добавить нового автора: Создает автора в БД. На вход принимает имя, дату рождения, жанр. В случае, если нарушена уникальность имени + даты рождения, возвращает ошибку (HttpStatus 400).
    - Изменить автора: Изменяет автора в БД - имя, дата рождения, жанр. На вход принимает новое имя, дату рождения, жанр. В случае, если новое значение не указанно, оно не должно меняться в БД. Например, передано только имя, тогда меняется только имя.
    - Получить информацию об авторе по идентификатору.
    - Получить всех авторов.
- Контроллер управления книгами
    - Добавить новую книгу: Создает книгу в БД. На вход принимает название, идентификатор автора, год публикации, количество книг в наличии.
    - Изменить книгу: Изменяет книгу в БД - название, год публикации. На вход принимает новое название и год публикации. В случае, если новое значение не указанно, оно не должно меняться в БД.
    - Получить информацию о книге по идентификатору.
    - Получить все книги.
    - Выдать книгу по абонементу: Уменьшает количество книг в наличии. Если книг в наличии нет, возвращает ошибку (HttpStatus 400). На вход принимает идентификатор книги.
    - Принять книгу (возврат выданной книги): Увеличивает количество книг в наличии. На вход принимает идентификатор книги.